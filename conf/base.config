/*
 * -------------------------------------------------
 *  genome-annotation Nextflow base config file
 * -------------------------------------------------
 */

process {

	cpus = { 1 * task.attempt }
	memory = { check_max( 8.GB * task.attempt, 'memory') }
	time = { 1.h * task.attempt }

	errorStrategy = { task.exitStatus in [143,137] ? 'retry' : 'finish' }
	maxRetries = 1
	maxErrors = '-1'
	
	withName:runRepeatMasker {
		cpus = { check_max(8 * task.attempt, 'cpus') }
		memory = { check_max(8.GB * task.attempt, 'memory') }
		time = { check_max(10.h * task.attempt, 'time') }
	}
	withName:runMergeRMGenome {
		cpus = { check_max(1 * task.attempt,'cpus') }
                memory = { check_max(4.GB * task.attempt, 'memory') }
                time = { check_max(1.h * task.attempt, 'time') }
	}
	withName:runMakeBlastDB {
		cpus = { check_max(1 * task.attempt, 'cpus') }
                memory = { check_max(8.GB * task.attempt, 'memory') }
                time = { check_max(4.h * task.attempt,'time') }
	}
	withName:runBlastProteins {
		cpus = { check_max(1 * task.attempt,'cpus') }
                memory = { check_max(16.GB * task.attempt, 'memory') }
                time = { check_max(48.h * task.attempt, 'time') }
	}
	withName:runExonerateProts {
		cpus = { check_max(8 * task.attempt, 'cpus') }
                memory = { check_max(16.GB * task.attempt, 'memory') }
                time = { check_max(12.h * task.attempt, 'time') }
	}
	withName:runGenomeThreaderProteins {
		module = [ 'Genomethreader/1.7.0' ]
		cpus = { check_max(1 * task.attempt, 'cpus') }
                memory = { check_max(16.GB * task.attempt, 'memory') }
                time = { check_max(72.h * task.attempt, 'time') }
	}
	withName:runBlastEst {
		cpus = { check_max(8 * task.attempt, 'cpus') }
                memory = { check_max(16.GB * task.attempt, 'memory') }
                time = { check_max(72.h * task.attempt, 'time') }
	}
	withName:runExonerateEST {
		cpus = { check_max(8 * task.attempt, 'cpus') }
                memory = { check_max(16.GB * task.attempt, 'memory') }
                time = { check_max(72.h * task.attempt, 'time') }
	}
	withName:runFastp {
		cpus = { check_max(8 * task.attempt, 'cpus') }
		memory = { check_max(8.GB * task.attempt, 'memory') }
		time = { check_max(4.h * task.attempt, 'time') }
	} 
	withName:runMakeHisatDB {
		cpus = { check_max(8 * task.attempt, 'cpus') }
                memory = { check_max(16.GB * task.attempt, 'memory') }
                time = { check_max(8.h * task.attempt , 'time') }
	}
	withName:runHisat2 {
		cpus = { check_max(16 * task.attempt, 'cpus') }
                memory = { check_max(16.GB * task.attempt, 'memory') }
                time = { check_max(8.h * task.attempt, 'time') }
	}
	withName:mergeHisatBams {
		cpus = { check_max(16 * task.attempt, 'cpus') }
                memory = { check_max(120.GB * task.attempt, 'memory') }
                time = { check_max(24.h * task.attempt, 'time') }
	}
	withName:runTrinity {
		cpus = { check_max(16 * task.attempt, 'cpus') }
                memory = { check_max(120.GB * task.attempt, 'memory') }
                time = { check_max(120.h * task.attempt, 'time') }
	}
	withName:runBlastTrinity {
		cpus = { check_max(8 * task.attempt, 'cpus') }
                memory = { check_max(8.GB * task.attempt, 'memory') }
                time = { check_max(8.h * task.attempt, 'time') }
	}
	withName:runExonerateTrinity {
		cpus = { check_max(8 * task.attempt, 'cpus') }
                memory = { check_max(16.GB * task.attempt, 'memory') }
                time = { check_max(8.h * task.attempt, 'time') }
	}

	withname:runAugustus {
                cpus = { check_max(1 * task.attempt, 'cpus') }
                memory = { check_max(8.GB * task.attempt, 'memory') }
                time = { check_max(48.h * task.attempt, 'time') }
        }
}

params {
  // Defaults only, expecting to be overwritten
  max_memory = 120.GB
  max_cpus = 16
  max_time = 240.h
}
