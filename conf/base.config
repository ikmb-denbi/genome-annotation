/*
 * -------------------------------------------------
 *  genome-annotation Nextflow base config file
 * -------------------------------------------------
 */

process {

	cpus = { 1 * task.attempt }
	memory = { check_max( 8.GB * task.attempt, 'memory') }
	time = { 1.h * task.attempt }

	errorStrategy = { task.exitStatus in [143,137] ? 'retry' : 'finish' }
	maxRetries = 1
	maxErrors = '-1'

	withLabel: short_running {
		time = { check_max(4.h * task.attempt, 'time') }
		memory = { check_max( 8.GB * task.attempt, 'memory') }
		cpus = { 1 * task.attempt }
	}

	withLabel: medium_running {
		time = { check_max(12.h * task.attempt, 'time') }
		memory = { check_max( 8.GB * task.attempt, 'memory') }
                cpus = { 1 * task.attempt }
	}

	withLabel: long_running {
		time = { check_max(48.h * task.attempt, 'time') }
		memory = { check_max( 16.GB * task.attempt, 'memory') }
                cpus = { 1 * task.attempt }
	}

	withLabel: extra_long_running {
		time = { check_max(120.h * task.attempt, 'time') }
		memory = { check_max( 16.GB * task.attempt, 'memory') }
                cpus = { 1 * task.attempt }
	}

	withName:repeatModel {
		time = { check_max(120.h * task.attempt, 'time') }
		cpus = 16
		memory = { check_max(32.GB * task.attempt, 'memory') }	
	}
	withName:repeatMask {
		cpus = params.max_cpus
		memory = { check_max(16.GB * task.attempt, 'memory') }
		time = { check_max(120.h * task.attempt, 'time') }
	}
	withName:estMinimap {
		cpus = params.max_cpus
                memory = { check_max(32.GB * task.attempt, 'memory') }
                time = { check_max(16.h * task.attempt,'time') }
	}
	withName:transPasaMinimap {
		cpus = params.max_cpus
                memory = { check_max(32.GB * task.attempt, 'memory') }
                time = { check_max(16.h * task.attempt,'time') }
	}
	withName:rseqMinimapTrinity {
		cpus = params.max_cpus
                memory = { check_max(32.GB * task.attempt, 'memory') }
                time = { check_max(16.h * task.attempt,'time') }
        }
	withName:protMakeDB {
		cpus = { check_max(1 * task.attempt, 'cpus') }
                memory = { check_max(8.GB * task.attempt, 'memory') }
                time = { check_max(4.h * task.attempt,'time') }
	}
	withName:protDiamondx {
		cpus = { check_max(4 * task.attempt,'cpus') }
                memory = { check_max(16.GB * task.attempt, 'memory') }
                time = { check_max(48.h * task.attempt, 'time') }
	}
	withName:protExonerate {
		cpus = { check_max(8 * task.attempt, 'cpus') }
                memory = { check_max(16.GB * task.attempt, 'memory') }
                time = { check_max(12.h * task.attempt, 'time') }
	}
	withName:rseqTrim {
		cpus = { check_max(8 * task.attempt, 'cpus') }
		memory = { check_max(8.GB * task.attempt, 'memory') }
		time = { check_max(4.h * task.attempt, 'time') }
	} 
	withName:rseqMakeDB {
		cpus = { check_max(8 * task.attempt, 'cpus') }
                memory = { check_max(16.GB * task.attempt, 'memory') }
                time = { check_max(8.h * task.attempt , 'time') }
	}
	withName:rseqMap {
		cpus = { check_max(16 * task.attempt, 'cpus') }
                memory = { check_max(16.GB * task.attempt, 'memory') }
                time = { check_max(8.h * task.attempt, 'time') }
	}
	withName:rseqMergeBams {
		cpus = { check_max(16 * task.attempt, 'cpus') }
                memory = { check_max(120.GB * task.attempt, 'memory') }
                time = { check_max(24.h * task.attempt, 'time') }
	}
	withName:rseqHints {
		cpus = { check_max(2 * task.attempt, 'cpus') }
                memory = { check_max(64.GB * task.attempt, 'memory') }
                time = { check_max(48.h * task.attempt, 'time') }
	}
	withName:rseqTrinity {
		cpus = params.max_cpus
                memory = { check_max(120.GB * task.attempt, 'memory') }
                time = { check_max(120.h * task.attempt, 'time') }
	}
	withName:transSeqclean {
		cpus = { check_max(4 * task.attempt, 'cpus') }
                memory = { check_max(16.GB * task.attempt, 'memory') }
                time = { check_max(48.h * task.attempt, 'time') }
	}
	withName:transPasa {
		cpus = { check_max(8 * task.attempt, 'cpus') }
		memory = { check_max(8.GB * task.attempt, 'memory') }
		time = { check_max(120.h * task.attempt, 'time') }
	}
	withName:trainAugustus {
		cpus = { check_max(8 * task.attempt, 'cpus') }
                memory = { check_max(8.GB * task.attempt, 'memory') }
                time = { check_max(480.h * task.attempt, 'time') }
	}
	withName:predAugustus {
                cpus = params.max_cpus
                memory = { check_max(16.GB * task.attempt, 'memory') }
                time = { check_max(48.h * task.attempt, 'time') }
        }
}

params {
  // Defaults only, expecting to be overwritten
  max_memory = 120.GB
  max_cpus = 16
  max_time = 240.h
}
