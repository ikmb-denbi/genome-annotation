/*
 * -------------------------------------------------
 *  genome-annotation Nextflow config file
 * -------------------------------------------------
 * Default config options for all environments.
 * Cluster-specific config options should be saved
 * in the conf folder and imported under a profile
 * name here.
 */

process.container = "mhoeppner/genome-annotation:dev"

/**********************
   Default parameters
 ***********************/

params { 
	proteins = false
	ESTs = false
	reads = false

	trinity = false
	gth = false
	RM = true

	augustus = false
	model = false

	funAnnot = true
	training = false

	rm_species = false
	rm_lib = false

	train_perc = 90
	train_set = false
	augCfg = false
	uniprot = ""

	nblast = 500
	nexonerate = 100
	nrepeats = 20
	max_intron_size = 20000

	blast_options = "6 qseqid sseqid sstart send slen pident qlen qstart qend length mismatch gapopen evalue bitscore"

	blast_evalue = 0.00001
	blast_bitscore = 80

	singleEnd = false
	rnaseq_stranded = false
	outdir = "output"
	name = false
	help = false
	email = false
	plaintext_email = false

	run_name = false
}

/***************
   Profiles 
 ***************/
 
profiles {
	standard {
		includeConfig 'conf/base.config'
                includeConfig 'conf/slurm_ikmba.config'
		includeConfig 'conf/singularity.config'
	}
	conda_ikmba {
		includeConfig 'conf/base.config'
		includeConfig 'conf/conda.config'
		includeConfig 'conf/slurm_ikmba.config'
	}
	ikmb_new {
		includeConfig 'conf/base.config'
		includeConfig 'conf/singularity.config'
                includeConfig 'conf/slurm_ikmbnew.config'
	}
	conda_ikmbnew {
                includeConfig 'conf/base.config'
                includeConfig 'conf/conda.config'
                includeConfig 'conf/slurm_ikmbnew.config'
	}
	ikmb_dx {
		includeConfig 'conf/base.config'
                includeConfig 'conf/slurm_ikmbdx.config'
	}
	assembly_cluster {
		includeConfig 'conf/base.config'
		includeConfig 'conf/slurm_assemblycluster.config'
	}
	custom_conda {
		includeConfig 'conf/base.config'
		includeConfig 'conf/conda.config'
		includeConfig 'conf/custom.config'
	}
	self_install {
		includeConfig 'conf/base.config'
		includeConfig 'conf/custom.config'
	}
	local {
		includeConfig 'conf/base.config'
	}
	none {
		// Don't load any config (for use with custom home configs)
	}
}


/***********************
    Pipeline Info
 **********************/
 
// Capture exit codes from upstream processes when piping
process.shell = ['/bin/bash', '-euo', 'pipefail']

timeline {
	enabled = true
	file = "${params.outdir}/pipeline_info/genome-annotation_timeline.html"
}
report {
	enabled = true
	file = "${params.outdir}/pipeline_info/genome-annotation_report.html"
}
trace {
	enabled = true
	file = "${params.outdir}/pipeline_info/genome-annotation_trace.txt"
}
dag {
	enabled = true
	file = "${params.outdir}/pipeline_info/genome-annotation_dag.svg"
}

manifest {
	homePage = 'https://github.com/ikmb-denbi/genome-annotation.git'
	description = 'This pipeline annotates an eukaryotic genome de novo with external hints.'
	mainScript = 'main.nf'
	version = '1.0'
	nextflowVersion = '18.12.0'
}

// Function to ensure that resource requirements don't go beyond
// a maximum limit
def check_max(obj, type) {
  if(type == 'memory'){
    try {
      if(obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
        return params.max_memory as nextflow.util.MemoryUnit
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
      return obj
    }
  } else if(type == 'time'){
    try {
      if(obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
        return params.max_time as nextflow.util.Duration
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
      return obj
    }
  } else if(type == 'cpus'){
    try {
      return Math.min( obj, params.max_cpus as int )
    } catch (all) {
      println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
      return obj
    }
  }
}
